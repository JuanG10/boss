[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec3 color; // AZUL_INICIAL = vec3(0.35, 0.48, 0.95)
uniform int OCTAVES = 4;

float rand(vec2 coord){
	return fract(sin(dot(coord.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float noise(vec2 coord){
	vec2 i = floor(coord); // El int
	vec2 f = fract(coord); // La fracci√≥n (ej: .05)

	// Las cuatro esquinas
	float a = rand(i); // (0,0);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);
	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

float fbm(vec2 coord){
	float value = 0.0;
	float scale = 0.5;

	for(int i = 0; i < OCTAVES; i++){
		value += noise(coord) * scale;
		coord *= 2.0;
		scale *= 0.5;
	}
	return value;
}

void fragment() {
	vec2 coord = UV * 25.0;

	vec2 motion = vec2( fbm(coord + vec2(TIME * -0.55, TIME * 0.55)) );

	float final = fbm(coord + motion);

	COLOR = vec4(color, final * 0.4);
}"
custom_defines = ""

[resource]
shader = SubResource( 1 )
shader_param/color = Vector3( 0.35, 0.48, 0.95 )
shader_param/OCTAVES = 4
